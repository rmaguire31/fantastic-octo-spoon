function display_gui(mbed_loc, config_fname, mbed_capture_fname)
%% DISPLAY_GUI
%
% DESCRIPTION
%   GUI interface to display analysed data and enable user to modify
%   capture settings.
%
% INPUTS
%   mbed_path - Path to MBED file system.
%   config_fname - Name of the capture file read by the microcontroller
%       containing capture definitions.
%   default_capture_fname - Name of the capture file written by the
%       microcontroller and read to extract capture data.
%   
% COPYRIGHT (C) Russell Maguire, Imi Ward Parsons, Lauren Miller, Tom Poon
% 2016

%% Sanity check inputs.
% Paths are platform specific.
if isunix()
    if ~isempty(getenv('USERNAME'))
        user = getenv('USERNAME');
    else
        user = getenv('USER');
    end
    if nargin < 1 || isempty(mbed_loc)
        mbed_loc = ['/media/' user '/MBED/'];
    end
    cache_loc = '~/.mbedcache/';
elseif ispc()
    % There isn't a nice way to find the MBED on Windows.
    if nargin < 1 || isempty(mbed_loc)
        if ~exist('E:\', 'dir')
            mbed_loc = 'E:\';
        else
            mbed_loc = 'D:\';
        end
    end
    cache_loc = [getenv('APPDATA') '.mbedcache\'];
elseif ismac()
    if nargin < 1 || isempty(mbed_loc)
        mbed_loc = '/Volumes/MBED/';
    end
    cache_loc = '~/.mbedcache/';
else
    uiwait(errordlg(...
        'Unable to determine operating system.',...
        'Unsupported Platform'...
    ));
    error('display_gui:unsupportedPlatform', 'Platform is not supported.');
end

if nargin < 2 || isempty(config_fname)
    config_fname = [mbed_loc 'CONFIG.JSN'];
end
if nargin < 3 || isempty(mbed_capture_fname)
    mbed_capture_fname = [mbed_loc 'CAPTURES.JSN'];
end

% Working paths.
if ~exist(mbed_loc, 'dir')
    uiwait(errordlg(...
        [
            'Unable to find MBED filesystem. Try specifying the path to '
            'the filesystem as an argument.'
        ],...
        'Filesystem Not Found'...
    ));
    error('display_gui:fileNotFound', 'Unable to find MBED filesystem.');
end
mkdir(cache_loc);
if ~exist(cache_loc, 'dir')
    uiwait(errordlg(...
        [
            'Unable to create cache directory. Try creating directory '''
            cache_loc ''' manually.'
        ],...
        'Permission Denied'...
    ));
    error('display_gui:fileNotFound', 'Unable to create cache directory.');
end

%% Initialise GUI.
% Initialise configuration with a call to set_config().
set_config(config_fname);

% Initialise GUI interface.
gui_alive = 1;
capture_tabgroup = init_gui(...
    @close_func,...
    @load_capture,...
    @save_capture,...
    @()set_config(config_fname),...
    @resample_capture,...
    @set_units...
);
units = char(176); % Degree character.
cached_capture_fname = update_capture_tabs(...
    cache_loc,...
    mbed_capture_fname,...
    capture_tabgroup,...
    units...
);

%% Search for capture file.
while (gui_alive)
    % Pause to avoid thrashing the MBED filesystem, it's fragile...
    pause(0.1);
    drawnow();
    if exist(mbed_capture_fname, 'file')
        % Update tabs.
        cached_capture_fname = update_capture_tabs(...
            cache_loc,...
            mbed_capture_fname,...
            capture_tabgroup,...
            units...
        );
        % Remove from MBED filesystem.
        delete(mbed_capture_fname);
    end
end

%% CALLBACKS

    function load_capture()
    %% LOAD_CAPTURE
    [fname, path, idx] = uigetfile(...
        {...
            '*.json;*.json~', 'JSON Files (*.json)';...
            '*', 'All Files';...
        },...
        'Load Capture'...
    );
    if idx > 0
        cached_capture_fname = update_capture_tabs(...
            cache_loc,...
            [path, fname],...
            capture_tabgroup,...
            units...
        );
    end
    end

    function save_capture() 
    %% SAVE_CAPTURE
    success = false;
    while ~success
        [fname, path, idx] = uiputfile(...
            {'*.json', 'JSON Files (*.json)'},...
            'Save Capture'...
        );
        if idx == 0
            % User cancelled.
            success = true;
        else
            % Save capture file to new location.
            new_capture_fname = [path, fname];
            [success, msg] = copyfile(cached_capture_fname, new_capture_fname);
        end
        % Check if transaction was successful.
        if ~success
            uiwait(errordlg(msg, 'Save Capture'));
        end
    end
    end

    function set_units(new_units)
    %% SET_UNITS
    units = new_units;
    cached_capture_fname = update_capture_tabs(...
        cache_loc,...
        cached_capture_fname,...
        capture_tabgroup,...
        units...
    );
    end

    function resample_capture()
    %% RESAMPLE_CAPTURE
    inp = inputdlg(...
        {'Sample rate (Hz):'},...
        'Resample Capture',...
        [1 40],...
        {'100'}...
    );
    if ~isempty(inp)
        fs = str2double(inp{1});
        cached_capture_fname = update_capture_tabs(...
            cache_loc,...
            cached_capture_fname,...
            capture_tabgroup,...
            units,...
            fs...
        );
    end
    end

    function close_func()
    %% CLOSE_FUNC
    gui_alive = 0;
    end
end

function capture_tabgroup = init_gui(close_func, load_func, save_func, settings_func, resample_func, units_func)
%% INIT_GUI
%
%
%

% Create figure.
f = figure('Visible', 'off');
f.Name = 'Acceleration Data Capture Program';
f.NumberTitle = 'off';
f.MenuBar = 'none';
f.ToolBar = 'none';
f.Position = [300, 150, 800, 600];
f.DeleteFcn = @(h,data)close_func();

% Options.
option_panel = uipanel(f);
option_panel.Title = 'Options';
option_panel.Position = [0.8 0.01 0.19 0.98];

load_btn = uicontrol(option_panel);
load_btn.String = 'Load';
load_btn.Units = 'normalized';
load_btn.Position = [0.05 0.88 0.9 0.1];
load_btn.Callback = @(h,data)load_func();

save_btn = uicontrol(option_panel);
save_btn.String = 'Save';
save_btn.Units = 'normalized';
save_btn.Position = [0.05 0.755 0.9 0.1];
save_btn.Callback = @(h,data)save_func();

% Embed gif in reload button using HTML.
if ispc()
    gif_fname = ['file://' fileparts(mfilename('fullpath')) '\mbed.gif'];
else
    gif_fname = ['file://' fileparts(mfilename('fullpath')) '/mbed.gif'];
end
reload_btn = uicontrol(option_panel);
reload_btn.String = sprintf(...
    [...
        '<html>'...
            '<p align="center" font-size="%dpx">Reload</p>'...
            '<img src="%s"/>'...
        '</html>'...
    ],...
    reload_btn.FontSize, gif_fname...
);
reload_btn.Units = 'normalized';
reload_btn.Position = [0.05 0.38 0.9 0.35];
reload_btn.HorizontalAlignment = 'center';
reload_btn.Callback =...
    @(h,data)helpdlg(...
        sprintf([...
            'This LED sequence indicates all captures have completed. '...
            'If results have not updated, try disconnecting and '...
            'reconnecting the MBED.'...
        ]),...
        'To Reload Capture'...
    );

settings_btn = uicontrol(option_panel);
settings_btn.String = 'Settings';
settings_btn.Units = 'normalized';
settings_btn.Position = [0.05 0.255 0.9 0.1];
settings_btn.Callback = @(h,data)settings_func();

resample_btn = uicontrol(option_panel);
resample_btn.String = 'Resample';
resample_btn.Units = 'normalized';
resample_btn.Position = [0.05 0.13 0.9 0.1];
resample_btn.Callback = @(h,data)resample_func();

units_btngroup = uibuttongroup(option_panel);
units_btngroup.Title = 'Units';
units_btngroup.Units = 'normalized';
units_btngroup.Position = [0.05 0.005 0.9 0.1];

degree_btn = uicontrol(units_btngroup);
degree_btn.Style = 'radiobutton';
degree_btn.String = 'Degrees';
degree_btn.Units = 'normalized';
degree_btn.Position = [0.1 0.5 0.8 0.5];
degree_btn.Callback = @(h,data)units_func(char(176)); % Degree char.

radians_btn = uicontrol(units_btngroup);
radians_btn.Style = 'radiobutton';
radians_btn.String = 'Radians';
radians_btn.Units = 'normalized';
radians_btn.Position = [0.1 0 0.8 0.5];
radians_btn.Callback = @(h,data)units_func('rad');

% Capture tabs.
capture_tabgroup = uitabgroup(f);
capture_tabgroup.Position = [0.01 0.01 0.79 0.98];

f.Visible = 'on';
end

function cached_capture_fname = update_capture_tabs(cache_loc, capture_fname, capture_tabgroup, units, fs)
%% UPDATE_CAPTURE_TABS
%
%

if nargin < 5
    fs = [];
end

% Ensure file is cached.
[loc,~,~] = fileparts(capture_fname);
if isequal(dir(loc), dir(cache_loc))
    cached_capture_fname = capture_fname;
    iscached = exist(cached_capture_fname, 'file');
else
    [~,name,~] = fileparts(capture_fname);
    timestamp = datestr(now(), '.yyyy-mm-dd-hh-MM-ss');
    cache_ext = '.json~';
    cached_capture_fname = [cache_loc  name  timestamp cache_ext];
    iscached = copyfile(capture_fname, cached_capture_fname);
end
if iscached
    % Parse capture file.
    try
        raw_captures = jsonload(cached_capture_fname);
    catch e
        module = e.identifier(1:strfind(e.identifier, ':')-1);
        switch module
            case {'jsonload'}
                raw_captures = {};
                errordlg(...
                    [capture_fname ' is not a valid JSON file.'],...
                    'Invalid Capture!'...
                );
            otherwise
                rethrow(e);
        end
    end
else
    raw_captures = {};
end

success_fields = {
    'start_time_s',...
    'sample_rate_hz',...
    'length',...
    'x',...
    'y',...
    'z',...
};
failure_fields = {
    'start_time_s',...
    'sample_rate_hz',...
    'length',...
    'failure_msg',...
};
% Postprocess and analyse captures.
captures = cell(size(raw_captures));
for i = 1:length(captures)
    if isfield(raw_captures{i}, success_fields)
        %% Resample capture.
        if ~isempty(fs)
            raw_captures{i}.x = resample(...
                raw_captures{i}.x,...
                fs / raw_captures{i}.sample_rate_hz...
            );
            raw_captures{i}.y = resample(...
                raw_captures{i}.y,...
                fs / raw_captures{i}.sample_rate_hz...
            );
            raw_captures{i}.z = resample(...
                raw_captures{i}.z,...
                fs / raw_captures{i}.sample_rate_hz...
            );
            raw_captures{i}.sample_rate_hz = fs;
            raw_captures{i}.length = length(raw_captures{i}.x);
        end

        %% Process capture.
        captures{i} = struct();
        [
            captures{i}.t,...
            captures{i}.roll,...
            captures{i}.pitch,...
            captures{i}.f,...
            captures{i}.roll_f,...
            captures{i}.pitch_f,...
        ] = postprocess(...
            raw_captures{i}.start_time_s,...
            raw_captures{i}.sample_rate_hz,...
            raw_captures{i}.x,...
            raw_captures{i}.y,...
            raw_captures{i}.z...
        );

        % Convert to degrees if necessary.
        switch units
            case {'rad'}
            case {char(176)} % Degree character.
                captures{i}.roll = rad2deg(captures{i}.roll);
                captures{i}.pitch = rad2deg(captures{i}.pitch);
            otherwise
                error(...
                    'display_gui:update_capture_files:unknownUnits',...
                    'Unknown units of orientation.'...
                );
        end

        %% Determine capture statistics.
        captures{i}.stats = struct();
        % Analyse roll.
        [
            captures{i}.stats.roll_mean,...
            captures{i}.stats.roll_var,...
            captures{i}.stats.roll_peaks,...
            captures{i}.stats.roll_locs,...
            captures{i}.stats.roll_f_peaks,...
            captures{i}.stats.roll_f_locs,...
        ] = analyse(...
            captures{i}.t,...
            captures{i}.roll,...
            captures{i}.f,...
            captures{i}.roll_f...
        );
        % Analyse pitch.
        [
            captures{i}.stats.pitch_mean,...
            captures{i}.stats.pitch_var,...
            captures{i}.stats.pitch_peaks,...
            captures{i}.stats.pitch_locs,...
            captures{i}.stats.pitch_f_peaks,...
            captures{i}.stats.pitch_f_locs,...
        ] = analyse(...
            captures{i}.t,...
            captures{i}.pitch,...
            captures{i}.f,...
            captures{i}.pitch_f...
        );

        %% Determine capture statistics.
        captures{i}.stats = struct();
        % Analyse roll.
        [
            captures{i}.stats.roll_mean,...
            captures{i}.stats.roll_var,...
            captures{i}.stats.roll_peaks,...
            captures{i}.stats.roll_locs,...
            captures{i}.stats.roll_f_peaks,...
            captures{i}.stats.roll_f_locs,...
            captures{i}.stats.roll_max,...
            captures{i}.stats.roll_f_max,...
        ] = analyse(...
            captures{i}.t,...
            captures{i}.roll,...
            captures{i}.f,...
            captures{i}.roll_f...
        );
        % Analyse pitch.
        [
            captures{i}.stats.pitch_mean,...
            captures{i}.stats.pitch_var,...
            captures{i}.stats.pitch_peaks,...
            captures{i}.stats.pitch_locs,...
            captures{i}.stats.pitch_f_peaks,...
            captures{i}.stats.pitch_f_locs,...
            captures{i}.stats.pitch_max,...
            captures{i}.stats.pitch_f_max,...
        ] = analyse(...
            captures{i}.t,...
            captures{i}.pitch,...
            captures{i}.f,...
            captures{i}.pitch_f...
        );
    elseif isfield(raw_captures{i}, failure_fields)
        captures{i} = raw_captures{i};
    end
end

% Remove any existing tabs.
while ~isempty(capture_tabgroup.Children)
    delete(capture_tabgroup.Children(1));
end

% Display capture data.
if isempty(captures)
    tab = uitab('Parent', []);
    tab.Title = 'New Tab';
    
    % Display 'no data' message.
    msg = uicontrol(tab);
    msg.Style = 'text';
    msg.String = [...
        'Press ''Load'' to load an existing capture file or record a '...
        'new capture by power cycling the MBED.'...
    ];
    msg.Units = 'normalized';
    msg.Position = [0.1, 0.1, 0.8, 0.8];
    msg.HorizontalAlignment = 'center';
    
    tab.Parent = capture_tabgroup;
else
    for i = 1:length(captures)
        % Create a tab for this capture.
        tab = uitab('Parent', []);
        tab.Title = sprintf('Capture %d', i);
        
        if isfield(captures{i}, failure_fields)
            % Display failure message.
            msg = uicontrol(tab);
            msg.Style = 'text';
            msg.String = ['Capture failed! ' captures{i}.failure_msg];
            msg.Units = 'normalized';
            msg.Position = [0.1, 0.1, 0.8, 0.8];
            msg.HorizontalAlignment = 'center';
            
        elseif ~isempty(captures{i})
            %% Panel for plots.
            graph_panel = uipanel(tab);
            graph_panel.Title = 'Results';
            graph_panel.Units = 'normalized';
            graph_panel.Position = [0, 0.2, 1, 0.8];

            %% Time domain.
            t_axes = axes('Parent', graph_panel);
            t_axes.Units = 'normalized';
            t_axes.Position = [0.1, 0.55, 0.8, 0.35];
            hold(t_axes, 'on');

            traces = [captures{i}.roll, captures{i}.pitch];
            plot(t_axes, captures{i}.t, traces);
            xlabel(t_axes, 'Time (s)');
            ylabel(t_axes, sprintf('Orientation (%s)', units));
            legend(t_axes, 'Roll', 'Pitch')

            % Roll peak values.
            plot(...
                t_axes,...
                captures{i}.stats.roll_locs,...
                captures{i}.stats.roll_peaks,...
                'v'...
            );
            text(...
                t_axes,...
                captures{i}.stats.roll_locs,...
                captures{i}.stats.roll_peaks,...
                num2str((1:numel(captures{i}.stats.roll_peaks))')...
            );

            % Pitch peak values.
            plot(...
                t_axes,...
                captures{i}.stats.pitch_locs,...
                captures{i}.stats.pitch_peaks,...
                'v'...
            );
            text(...
                t_axes,...
                captures{i}.stats.pitch_locs,...
                captures{i}.stats.pitch_peaks,...
                num2str((1:numel(captures{i}.stats.pitch_peaks))')...
            );

            %% Frequency domain.
            f_axes = axes('Parent', graph_panel);
            f_axes.Units = 'normalized';
            f_axes.Position = [0.1, 0.1, 0.8, 0.35];
            hold(f_axes, 'on');

            traces = [captures{i}.roll_f, captures{i}.pitch_f];
            plot(f_axes, captures{i}.f, traces);
            xlabel(f_axes, 'Frequency (Hz)');
            ylabel(f_axes, 'Power (dB)');

            % Roll peak frequencies.
            plot(...
                f_axes,...
                captures{i}.stats.roll_f_locs,...
                captures{i}.stats.roll_f_peaks,...
                'v'...
            );
            text(...
                f_axes,...
                captures{i}.stats.roll_f_locs,...
                captures{i}.stats.roll_f_peaks,...
                num2str((1:numel(captures{i}.stats.roll_f_peaks))')...
            );

            % Pitch peak frequencies.
            plot(...
                f_axes,...
                captures{i}.stats.pitch_f_locs,...
                captures{i}.stats.pitch_f_peaks,...
                'v'...
            );
            text(...
                f_axes,...
                captures{i}.stats.pitch_f_locs,...
                captures{i}.stats.pitch_f_peaks,...
                num2str((1:numel(captures{i}.stats.pitch_f_peaks))')...
            );

            %% Panel for statistics.
            stats_panel = uipanel(tab);
            stats_panel.Title = 'Statistics';
            stats_panel.Units = 'normalized';
            stats_panel.Position = [0, 0, 1, 0.2];

            stats_table = uitable(stats_panel);
            stats_table.RowName = {'Roll', 'Pitch'};
            stats_table.ColumnName = {...
                sprintf('Mean|%s', units),...
                sprintf('Standard Deviation|%s', units),...
                sprintf('Peak|%s', units),...
                sprintf('Peak Frequency|%s', 'Hz'),...
            };
            stats_table.Data = [...
                captures{i}.stats.pitch_mean,...
                sqrt(captures{i}.stats.pitch_var),...
                captures{i}.stats.pitch_max,...
                captures{i}.stats.pitch_f_max;...

                captures{i}.stats.roll_mean,...
                sqrt(captures{i}.stats.roll_var),...
                captures{i}.stats.roll_max,...
                captures{i}.stats.roll_f_max;...
            ];
            stats_table.Units = 'normalized';
            stats_table.Position = [0.01, 0, 0.98, 1];
            stats_table.ColumnWidth = {135};
        end
            
        tab.Parent = capture_tabgroup;
    end
end
end
